from typing import Union, Optional

class ffi:
    @staticmethod
    def new(ffi_type: str, data: Optional[bytes] = None) -> "ffi": ...

    def __bytes__(self) -> bytes: ...

class lib:
    @staticmethod
    def crypto_sign_ed25519_ref10_fe_frombytes(fe_out: ffi, fe_bytes_in: ffi): ...
    @staticmethod
    def crypto_sign_ed25519_ref10_fe_tobytes(fe_bytes_out: ffi, fe_in: ffi): ...

    @staticmethod
    def crypto_sign_ed25519_ref10_fe_1(fe_out: ffi): ...

    @staticmethod
    def crypto_sign_ed25519_ref10_fe_add(fe_out: ffi, addend_a_fe_in: ffi, addend_b_fe_in: ffi): ...
    @staticmethod
    def crypto_sign_ed25519_ref10_fe_sub(fe_out: ffi, minuend_fe_in: ffi, subtrahend_fe_in: ffi): ...
    @staticmethod
    def crypto_sign_ed25519_ref10_fe_mul(fe_out: ffi, multiplicand_fe_in: ffi, multiplier_fe_in: ffi): ...
    @staticmethod
    def crypto_sign_ed25519_ref10_fe_invert(fe_out: ffi, fe_in: ffi): ...

    @staticmethod
    def crypto_sign_ed25519_ref10_ge_tobytes(ge_p2_bytes_out: ffi, ge_p2_in: ffi): ...
    @staticmethod
    def crypto_sign_ed25519_ref10_ge_p3_tobytes(ge_p3_bytes_out: ffi, ge_p3_in: ffi): ...
    @staticmethod
    def crypto_sign_ed25519_ref10_ge_frombytes_negate_vartime(ge_p3_out: ffi, ge_p3_bytes_in: ffi) -> int: ...

    @staticmethod
    def crypto_sign_ed25519_ref10_ge_scalarmult_base(ge_p3_out: ffi, scalar_in: ffi): ...
    @staticmethod
    def crypto_sign_ed25519_ref10_ge_double_scalarmult_vartime(
        ge_p2_out: ffi,
        scalar_a_in: ffi,
        ge_p3_in: ffi,
        scalar_b_in: ffi
    ): ...

    @staticmethod
    def crypto_sign_ed25519_ref10_sc_reduce(scalar_inout: ffi): ...
    @staticmethod
    def crypto_sign_ed25519_ref10_sc_muladd(
        scalar_out: ffi,
        multiplicand_scalar_in: ffi,
        multiplier_scalar_in: ffi,
        addend_scalar_in: ffi
    ): ...
