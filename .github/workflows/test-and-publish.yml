name: Test & Publish

on: [push, pull_request]

permissions:
  contents: read

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "pypy-3.9"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install libsodium and libxeddsa on ubuntu-latest
        run: |
          sudo apt-get install -y libsodium-dev
          sudo curl -L -o /usr/local/lib/libxeddsa.a https://github.com/Syndace/libxeddsa/releases/download/v2.0.0/libxeddsa-linux-amd64.a
        if: matrix.os == 'ubuntu-latest'

      - name: Install libxeddsa on macos-latest
        run: |
          curl -L -o /opt/homebrew/lib/libxeddsa.a https://github.com/Syndace/libxeddsa/releases/download/v2.0.0/libxeddsa-macos-amd64.a
        if: matrix.os == 'macos-latest'

      - name: Download libsodium and libxeddsa on windows-latest
        shell: bash
        run: |
          curl -L -o libsodium-1.0.20-stable-msvc.zip https://download.libsodium.org/libsodium/releases/libsodium-1.0.20-stable-msvc.zip
          unzip libsodium-1.0.20-stable-msvc.zip
          mv libsodium/x64/Release/v143/static/libsodium.lib .
          curl -L -o libxeddsa.lib https://github.com/Syndace/libxeddsa/releases/download/v2.0.0/libxeddsa-windows-amd64.lib
        if: matrix.os == 'windows-latest'

      - name: Install/update package management dependencies
        run: python -m pip install --upgrade pip setuptools wheel
      - name: Build and install python-xeddsa
        run: pip install .
        env:
          LIBRARY_PATH: /opt/homebrew/lib
      - name: Install test dependencies
        run: pip install --upgrade pytest pytest-cov mypy pylint flake8 types-cffi

      - name: Type-check using mypy
        shell: bash
        run: MYPYPATH=stubs/ mypy --strict xeddsa/ setup.py libxeddsa/ tests/
      - name: Lint using pylint
        run: pylint xeddsa/ setup.py libxeddsa/ tests/
      - name: Format-check using Flake8
        run: flake8 xeddsa/ setup.py libxeddsa/ tests/
      - name: Test using pytest
        run: pytest --cov=xeddsa --cov-report term-missing:skip-covered

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install libsodium and libxeddsa
        run: |
          sudo apt-get install -y libsodium-dev
          sudo curl -L -o /usr/local/lib/libxeddsa.a https://github.com/Syndace/libxeddsa/releases/download/v2.0.0/libxeddsa-linux-amd64.a

      - name: Build source distribution
        run: python3 setup.py sdist

      - uses: actions/upload-artifact@v4
        with:
          path: dist/*.tar.gz

  build_wheels_linux:
    name: Build wheels for Linux
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download libxeddsa
        run: curl -L -o libxeddsa.a https://github.com/Syndace/libxeddsa/releases/download/v2.0.0/libxeddsa-linux-amd64.a

      - name: Build wheels using cibuildwheel
        uses: pypa/cibuildwheel@v2.19.2
        env:
          CIBW_ARCHS_LINUX: auto64
          CIBW_SKIP: "*-musllinux_*"
          CIBW_BEFORE_ALL_LINUX: yum install -y libsodium-devel && cp libxeddsa.a /usr/local/lib/

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-linux
          path: ./wheelhouse/*.whl

  build_wheels_macos:
    name: Build wheels for MacOS ${{ matrix.arch }}
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]

    steps:
      - uses: actions/checkout@v4

      - name: Install ${{ matrix.arch }} version of libxeddsa
        run: |
          curl -L -o /opt/homebrew/lib/libxeddsa.a https://github.com/Syndace/libxeddsa/releases/download/v2.0.0/libxeddsa-macos-${{ matrix.arch }}.a

      - name: Install arm64 version of libsodium
        run: |
          brew uninstall --ignore-dependencies libsodium
          brew fetch --force --bottle-tag=arm64_sonoma libsodium | tee brew_output
          downloaded_to=$(grep "Downloaded to" brew_output)
          downloaded_to_split=($downloaded_to)
          brew install ${downloaded_to_split[2]}
        if: matrix.arch == 'arm64'

      - name: Build amd64 wheels using cibuildwheel
        uses: pypa/cibuildwheel@v2.19.2
        env:
          CIBW_ARCHS_MACOS: x86_64
          LIBRARY_PATH: /opt/homebrew/lib
        if: matrix.arch == 'amd64'

      - name: Build arm64 wheels using cibuildwheel
        uses: pypa/cibuildwheel@v2.19.2
        env:
          CIBW_ARCHS_MACOS: arm64
          LIBRARY_PATH: /opt/homebrew/lib
          MACOSX_DEPLOYMENT_TARGET: 14
        if: matrix.arch == 'arm64'

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.arch }}
          path: ./wheelhouse/*.whl

  build_wheels_windows:
    name: Build wheels for Windows
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download libsodium and libxeddsa
        shell: bash
        run: |
          curl -L -o libsodium-1.0.20-stable-msvc.zip https://download.libsodium.org/libsodium/releases/libsodium-1.0.20-stable-msvc.zip
          unzip libsodium-1.0.20-stable-msvc.zip
          mv libsodium/x64/Release/v143/static/libsodium.lib .
          curl -L -o libxeddsa.lib https://github.com/Syndace/libxeddsa/releases/download/v2.0.0/libxeddsa-windows-amd64.lib

      - name: Build wheels using cibuildwheel
        uses: pypa/cibuildwheel@v2.19.2
        env:
          CIBW_ARCHS_WINDOWS: auto64

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-windows
          path: ./wheelhouse/*.whl

  publish:
    needs: [test, build_sdist, build_wheels_linux, build_wheels_macos, build_wheels_windows]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.9.0
        with:
          user: __token__
          password: ${{ secrets.pypi_token }}
